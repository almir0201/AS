.container {
  padding-left: var(--container-padding);
  padding-right: var(--container-padding);
  width: 100%;
  margin: 0 auto;

  &:not(.container--fluid) {
    max-width: var(--content-width);
  }
}

.grid {
  display: grid;
  grid-template-columns: repeat($columns-count, minmax(0, 1fr));
  grid-gap: var(--grid-row-gap) var(--grid-column-gap);

  &.no-gap {
    grid-gap: 0 !important;
  }

  &.no-row-gap {
    grid-row-gap: 0 !important;
  }

  &.no-column-gap {
    grid-column-gap: 0 !important;
  }

  &.column-gap-10 {
    grid-column-gap: 10px !important;
  }

  &.align-items-center {
    align-items: center;
  }

  &.align-items-end {
    align-items: end;
  }

  &.equalize {
    grid-auto-rows: 1fr;
  }
}

.justify-self-start {
  justify-self: start;
}

.justify-self-center {
  justify-self: center;
}

.justify-self-end {
  justify-self: end;
}

@for $i from 0 through $columns-count {
  .order-#{$i} {
    order: #{$i};
  }

  .col-#{$i} {
    grid-column-end: span #{$i};
  }

  .offset-#{$i} {
    grid-column-start: #{$i + 1};
  }
}

@each $key, $value in $breakpoints {
  @include breakpoint-up($key) {
    @for $i from 1 through $columns-count {
      .order-#{$key}-#{$i} {
        order: #{$i};
      }

      .col-#{$key}-#{$i} {
        grid-column-end: span #{$i};
      }

      .offset-#{$key}-#{$i} {
        grid-column-start: #{$i + 1};
      }
    }
  }
}
